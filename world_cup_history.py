# -*- coding: utf-8 -*-
"""World Cup History.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sMukpjPwvLLpB3zEDsYqPDGzbn0lMvPh
"""

from bs4 import BeautifulSoup
import requests

wc='http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=1987%2F88;trophy=12;type=season'

html = requests.get(wc)

b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')



Wc_data=[]
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        toss= b.find_all(class_='match-detail--right')[1].text
        toss=toss.split(',')
        FI= toss[1].split()
        FI=FI[2]
        toss=toss[0]
        team1=b.find_all(class_='accordion-header')[0].text.split()
        team1=team1[0]
        team2=b.find_all(class_='accordion-header')[1].text.split()
        team2=team2[0]
        Mom= b.find_all(class_='match-detail--right')[2].text
        Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
        Winner = Winner[0]
        Wc_data.append([team1,team2,toss,FI,Winner,Mom])

import pandas as pd
wc_88=pd.DataFrame(Wc_data)

html = requests.get('http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=1991%2F92;trophy=12;type=season')
b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')

Wc_91=[]
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        
        
        
        Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
        Winner = Winner[0]
        
        toss= b.find_all(class_='match-detail--right')[1].text
        toss=toss.split(',')
        FI= toss[1].split()
        FI=FI[2]
        toss=toss[0]
        team1=b.find_all(class_='cscore_name cscore_name--long')[0].text
        
        team2=b.find_all(class_='cscore_name cscore_name--long')[1].text
        
        if Winner == 'No':
            Mom = 0
        else:
            Mom= b.find_all(class_='match-detail--right')[2].text
        
        
        
        Wc_91.append([team1,team2,toss,FI,Winner,Mom])

wc_91=pd.DataFrame(Wc_91)

html = requests.get('http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=1995%2F96;trophy=12;type=season')
b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')

Wc_95=[]
count=0
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        count=count +1
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        
        if count !=5 and count != 14:
            Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
            Winner = Winner[0]
        
            toss= b.find_all(class_='match-detail--right')[1].text
            toss=toss.split(',')
            FI= toss[1].split()
            FI=FI[2]
            toss=toss[0]
            team1=b.find_all(class_='cscore_name cscore_name--long')[0].text
        
            team2=b.find_all(class_='cscore_name cscore_name--long')[1].text
        
            if Winner == 'No':
                
                Mom = 0
            else:
                Mom= b.find_all(class_='match-detail--right')[2].text
            
            Wc_95.append([team1,team2,toss,FI,Winner,Mom])

wc_95=pd.DataFrame(Wc_95)

html = requests.get('http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=1999;trophy=12;type=season')
b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')

Wc_99=[]
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        
        
        
        Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
        Winner = Winner[0]
        
        toss= b.find_all(class_='match-detail--right')[1].text
        toss=toss.split(',')
        FI= toss[1].split()
        FI=FI[2]
        toss=toss[0]
        team1=b.find_all(class_='cscore_name cscore_name--long')[0].text
        
        team2=b.find_all(class_='cscore_name cscore_name--long')[1].text
        
        if Winner == 'No':
            Mom = 0
        else:
            Mom= b.find_all(class_='match-detail--right')[2].text
        
        
        
        Wc_99.append([team1,team2,toss,FI,Winner,Mom])

wc_99=pd.DataFrame(Wc_99)

html = requests.get('http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=2002%2F03;trophy=12;type=season')
b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')

Wc_02=[]
count=0
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        count=count +1
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        
        if count !=8 and count != 21:
            Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
            Winner = Winner[0]
        
            toss= b.find_all(class_='match-detail--right')[1].text
            toss=toss.split(',')
            FI= toss[1].split()
            FI=FI[2]
            toss=toss[0]
            team1=b.find_all(class_='cscore_name cscore_name--long')[0].text
        
            team2=b.find_all(class_='cscore_name cscore_name--long')[1].text
        
            if Winner == 'No':
                
                Mom = 0
            else:
                Mom= b.find_all(class_='match-detail--right')[2].text
            
            Wc_02.append([team1,team2,toss,FI,Winner,Mom])

wc_02=pd.DataFrame(Wc_02)

html = requests.get('http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=2006%2F07;trophy=12;type=season')
b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')

Wc_06=[]
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        count=count +1
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        
        if count !=3:
            Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
            Winner = Winner[0]
        
            toss= b.find_all(class_='match-detail--right')[1].text
            toss=toss.split(',')
            FI= toss[1].split()
            FI=FI[2]
            toss=toss[0]
            team1=b.find_all(class_='cscore_name cscore_name--long')[0].text
        
            team2=b.find_all(class_='cscore_name cscore_name--long')[1].text
        
            if Winner == 'No':
                
                Mom = 0
            else:
                Mom= b.find_all(class_='match-detail--right')[2].text
            
            Wc_06.append([team1,team2,toss,FI,Winner,Mom])

wc_06=pd.DataFrame(Wc_06)

html = requests.get('http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=2010%2F11;trophy=12;type=season')
b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')

Wc_11=[]
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        
        
        
        Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
        Winner = Winner[0]
        
        toss= b.find_all(class_='match-detail--right')[1].text
        toss=toss.split(',')
        FI= toss[1].split()
        FI=FI[2]
        toss=toss[0]
        team1=b.find_all(class_='cscore_name cscore_name--long')[0].text
        
        team2=b.find_all(class_='cscore_name cscore_name--long')[1].text
        
        if Winner == 'No':
            Mom = 0
        else:
            Mom= b.find_all(class_='match-detail--right')[2].text
        
        
        
        Wc_11.append([team1,team2,toss,FI,Winner,Mom])

wc_11=pd.DataFrame(Wc_11)

html = requests.get('http://stats.espncricinfo.com/ci/engine/records/team/match_results.html?id=2014%2F15;trophy=12;type=season')
b = BeautifulSoup(html.content)

years = b.find_all(class_='data-link')

Wc_14=[]
count=0
for cell in years:
    href = 'http://www.espncricinfo.com' + cell.attrs['href']
    if href.find('/ci/engine/match/')!= -1:
        count=count +1
        html = requests.get(href)
        b = BeautifulSoup(html.content)
        
        if count !=11:
            Winner= b.find_all(class_='cscore_commentary cscore_commentary--footer')[0].text.split()
            Winner = Winner[0]
        
            toss= b.find_all(class_='match-detail--right')[1].text
            toss=toss.split(',')
            FI= toss[1].split()
            FI=FI[2]
            toss=toss[0]
            team1=b.find_all(class_='cscore_name cscore_name--long')[0].text
        
            team2=b.find_all(class_='cscore_name cscore_name--long')[1].text
        
            if Winner == 'No':
                
                Mom = 0
            else:
                Mom= b.find_all(class_='match-detail--right')[2].text
            
            Wc_14.append([team1,team2,toss,FI,Winner,Mom])

wc_14=pd.DataFrame(Wc_14)

wc_91['Year']= 1991
wc_95['Year']= 1995
wc_99['Year']= 1999
wc_02['Year']= 2003
wc_06['Year']= 2007
wc_11['Year']= 2011
wc_14['Year']= 2015
wc_total = pd.concat([wc_91,wc_95,wc_99,wc_02,wc_06,wc_11,wc_14])

wc_total.columns=['Team1','Team2','Toss_won','Toss_Decesion','Tean_won','MoM','Year']

wc_total[wc_total['Year']>1995]['MoM'].count()

role =[]
wc_total['role']= 0
for cell in wc_total['MoM']:
         
    if cell != 0:
        
        href = 'https://en.wikipedia.org/wiki/' + cell
        html = requests.get(href)
        b = BeautifulSoup(html.content)
    
    #print(b.find_all(class_='mw-parser-output')[0].find('may refer to'))
    
        if len(b.find_all(class_='role')) < 1  :
            href = 'https://en.wikipedia.org/wiki/' + cell + '_(cricketer)'
        
            html = requests.get(href)
            b = BeautifulSoup(html.content)
            if len(b.find_all(class_='role')) <1:
                ro='Manual'
                
            else:
                ro= b.find_all(class_='role')[0].text
        
        
        
        else:
        
            ro= b.find_all(class_='role')[0].text
        
    else:
        
        ro = 'Na'
        
    
   
    role.append([ro])

a=pd.DataFrame(role)
a.shape

wc_total['role']=a

wc_total.shape

b=a.set_index(wc_total.index)

wc_total.drop('role',axis=1,inplace=True)

wc_total.shape

wc_total['role']=b

WC_hist= pd.read_csv('WC_hist.csv')

WC_hist.head()



WC_hist.loc[WC_hist['role'].str.contains('Batsman'),'role']='Batsman'
WC_hist.loc[WC_hist['role'].str.contains('Batsmen'),'role']='Batsman'
WC_hist.loc[WC_hist['role'].str.contains('batsman'),'role']='Batsman'
WC_hist.loc[WC_hist['role'].str.contains('Wicket-keeper'),'role']='Batsman'
WC_hist.loc[WC_hist['role'].str.contains('Opener'),'role']='Batsman'

WC_hist.loc[WC_hist['role'].str.contains('Bowler'),'role']='Bowler'
WC_hist.loc[WC_hist['role'].str.contains('bowler'),'role']='Bowler'
WC_hist.loc[WC_hist['role'].str.contains('Bowling'),'role']='Bowler'

WC_hist.loc[WC_hist['role'].str.contains('All-rounder'),'role']='All-rounder'

WC_hist.loc[WC_hist['role'].str.contains('Elite Panel of ICC Referees'),'role']='Batsman'

WC_hist.loc[WC_hist['role'].str.contains('Wicketkeeper'),'role']='Batsman'
WC_hist.loc[WC_hist['role'].str.contains('Bowl'),'role']='Bowler'
WC_hist.loc[WC_hist['role'].str.contains('all-rounder'),'role']='All-rounder'
WC_hist.loc[WC_hist['role'].str.contains('All Rounder'),'role']='All-rounder'

WC_hist['role'].unique()

WC_hist[WC_hist['role'].str.contains('Coach')]

WC_hist.loc[WC_hist['MoM']=='Craig Spearman','role']= 'Batsman'

WC_hist.loc[WC_hist['MoM']=='Saleem Malik','role']= 'Batsman'

WC_hist.loc[WC_hist['MoM']=='Minhajul Abedin','role']= 'Batsman'

WC_hist.loc[WC_hist['MoM']=='Saeed Anwar','role']= 'Bowler'

WC_hist.loc[WC_hist['MoM']=='Geoff Allott','role']= 'Bowler'

WC_hist.loc[WC_hist['MoM']=='Aasif Karim','role']= 'Bowler'

WC_hist['role'].unique()

WC_hist.drop(index=[8,12,52,107,131,155,239],inplace=True)

WC_hist['role'].unique()

WC_hist[(WC_hist['Year']==2015)&(WC_hist['Tean_won']=='Australia')]

#Win percentage

win_91=(6/9)
win_95=(6/8)
win_99=(7/10)
win_03=(11/11)
win_07=(11/11)
win_11=(7/9)
win_15=(7/8)



#Teams Reaching Semi finals

sem_91=wc_91[[0,1]].tail(3).drop(38)

sem_95=wc_95[[0,1]].tail(3).drop(35)

sem_99=wc_99[[0,1]].tail(3).drop(41)

sem_02=wc_02[[0,1]].tail(3).drop(51)

sem_06=wc_06[[0,1]].tail(3).drop(50)

sem_11=wc_11[[0,1]].tail(3).drop(48)

sem_14=wc_14[[0,1]].tail(3).drop(47)

# Toss wins = match wins?
count=0
for i,y in zip(WC_hist[WC_hist['Year']==2015]['Tean_won'],WC_hist[WC_hist['Year']==2015]['Toss_won']):
    
      
    if  i.strip() == y.strip():
        WC_hist.loc[WC_hist.index==count,'TW']= True
        
        
    else:
        WC_hist.loc[WC_hist.index==count,'TW']= False
        
    
    count=count+1


a=WC_hist[WC_hist['Year']==2015].shape[0]

b=WC_hist[WC_hist['Year']==2015]['TW'].sum()

TW= b

TL=a-b
print(TW)
print(TL)

#Target or chase

count=0
for i,y in zip(WC_hist[WC_hist['Year']==2015]['Tean_won'],WC_hist[WC_hist['Year']==2015]['Toss_won']):
    
      
    if  i.strip() == y.strip():
        if WC_hist['Toss_Decesion'].iloc[count]=='bat' :
            
            
            WC_hist.loc[WC_hist.index==count,'Target/Chase']= 1
        
        else:
            WC_hist.loc[WC_hist.index==count,'Target/Chase']= 0
        
        
        
    else:
        if WC_hist['Toss_Decesion'].iloc[count]=='bat':
            
            
            WC_hist.loc[WC_hist.index==count,'Target/Chase']= 0
        
        else:
            WC_hist.loc[WC_hist.index==count,'Target/Chase']= 1
        
        
    
    count=count+1


TC=WC_hist[WC_hist['Year']==2015]['Target/Chase'].sum()

Total = WC_hist[WC_hist['Year']==2015].shape[0]

print(TC, Total-TC)

# Bat vs Bowl vs All

WC_hist.loc[WC_hist['role'].str.contains('All rounder'),'role']='All-rounder'



WC_hist['role'].value_counts()

#win % by teams

win=pd.read_csv('Win%.csv')

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

indices = range(7)

width = np.min(np.diff(indices))/3.



names=['Pakistan','Sri Lanka','Australia','Australia','Australia','India','Australia']

win=[6,6,7,11,11,7,7]
Loss=[3,2,3,0,0,2,1]

fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111)
a= ax.bar(indices-width/2.,win,width,color='b',)
b= ax.bar(indices+width/2.,Loss,width,color='r')
#tiks = ax.get_xticks().tolist()

def autolabel(rects):
    # Get y-axis height to calculate label position from.
    (y_bottom, y_top) = ax.get_ylim()
    y_height = y_top - y_bottom

    for rect in rects:
        height = rect.get_height()

        # Fraction of axis height taken up by this rectangle
        p_height = (height / y_height)

        # If we can fit the label above the column, do that;
        # otherwise, put it inside the column.
        if p_height > 0.95: # arbitrary; 95% looked good to me.
            label_position = height - (y_height * 0.001)
        else:
            label_position = height + (y_height * 0.01)

        ax.text(rect.get_x() + rect.get_width()/2., label_position,
                '%d' % int(height),
                ha='center', va='bottom')
        

autolabel(a)

autolabel(b)
        
ax.axes.set_xticks(np.arange(7))
ax.axes.set_xticklabels(names)
ax.set_xlabel('Winning team performance')
ax.legend(('Win','Loss'))
plt.show()

indices = range(7)

width = np.min(np.diff(indices))/3.



names=['1991','1995','1999','2003','2007','2011','2015']

win=[23,14,15,24,24,23,21]
Loss=[14,21,26,26,27,25,27]

fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111)
a= ax.bar(indices-width/2.,win,width,color='c',)
b= ax.bar(indices+width/2.,Loss,width,color='m')
#tiks = ax.get_xticks().tolist()

def autolabel(rects):
    # Get y-axis height to calculate label position from.
    (y_bottom, y_top) = ax.get_ylim()
    y_height = y_top - y_bottom

    for rect in rects:
        height = rect.get_height()

        # Fraction of axis height taken up by this rectangle
        p_height = (height / y_height)

        # If we can fit the label above the column, do that;
        # otherwise, put it inside the column.
        if p_height > 0.95: # arbitrary; 95% looked good to me.
            label_position = height - (y_height * 0.001)
        else:
            label_position = height + (y_height * 0.01)

        ax.text(rect.get_x() + rect.get_width()/2., label_position,
                '%d' % int(height),
                ha='center', va='bottom')
        

autolabel(a)

autolabel(b)
        
ax.axes.set_xticks(np.arange(7))
ax.axes.set_xticklabels(names)
ax.set_xlabel('Toss Won or Loss in each worldcup')
ax.legend(('Won','Loss'))
plt.show()

indices = range(7)

width = np.min(np.diff(indices))/3.



names=['1991','1995','1999','2003','2007','2011','2015']

target=[17,18,23,29,26,24,19]
chase=[20,17,18,21,25,24,29]

fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111)
a= ax.bar(indices-width/2.,target,width,color='m',)
b= ax.bar(indices+width/2.,chase,width,color='k')
#tiks = ax.get_xticks().tolist()

def autolabel(rects):
    # Get y-axis height to calculate label position from.
    (y_bottom, y_top) = ax.get_ylim()
    y_height = y_top - y_bottom

    for rect in rects:
        height = rect.get_height()

        # Fraction of axis height taken up by this rectangle
        p_height = (height / y_height)

        # If we can fit the label above the column, do that;
        # otherwise, put it inside the column.
        if p_height > 0.95: # arbitrary; 95% looked good to me.
            label_position = height - (y_height * 0.001)
        else:
            label_position = height + (y_height * 0.01)

        ax.text(rect.get_x() + rect.get_width()/2., label_position,
                '%d' % int(height),
                ha='center', va='bottom')
        

autolabel(a)

autolabel(b)
        
ax.axes.set_xticks(np.arange(7))
ax.axes.set_xticklabels(names)
ax.set_xlabel('Team winning by setting Targets vs winning by chasing')
ax.legend(('Target','Chase'))
plt.show()

indices = range(3)

width = np.min(np.diff(indices))/3.



names=['Batsman','Bowler','All Rounder']

val=[167,75,68]


fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111)
a= ax.bar(indices-width/8,val,width,color='c',)

#tiks = ax.get_xticks().tolist()

def autolabel(rects):
    # Get y-axis height to calculate label position from.
    (y_bottom, y_top) = ax.get_ylim()
    y_height = y_top - y_bottom

    for rect in rects:
        height = rect.get_height()

        # Fraction of axis height taken up by this rectangle
        p_height = (height / y_height)

        # If we can fit the label above the column, do that;
        # otherwise, put it inside the column.
        if p_height > 0.95: # arbitrary; 95% looked good to me.
            label_position = height - (y_height * 0.001)
        else:
            label_position = height + (y_height * 0.01)

        ax.text(rect.get_x() + rect.get_width()/2., label_position,
                '%d' % int(height),
                ha='center', va='bottom')
        

autolabel(a)


        
ax.axes.set_xticks(np.arange(7))
ax.axes.set_xticklabels(names)
plt.show()

indices = range(6)

width = np.min(np.diff(indices))/3.



names=['Australia','Pakistan','India','South Africa','Sri Lanka','New Zeland']

semi=[5,3,4,4,4,4]
final=[5,2,2,0,3,1]

fig = plt.figure(figsize=(20,10))
ax = fig.add_subplot(111)
a= ax.bar(indices-width/2.,semi,width,color='r',)
b= ax.bar(indices+width/2.,final,width,color='b')
#tiks = ax.get_xticks().tolist()

def autolabel(rects):
    # Get y-axis height to calculate label position from.
    (y_bottom, y_top) = ax.get_ylim()
    y_height = y_top - y_bottom

    for rect in rects:
        height = rect.get_height()

        # Fraction of axis height taken up by this rectangle
        p_height = (height / y_height)

        # If we can fit the label above the column, do that;
        # otherwise, put it inside the column.
        if p_height > 0.95: # arbitrary; 95% looked good to me.
            label_position = height - (y_height * 0.001)
        else:
            label_position = height + (y_height * 0.01)

        ax.text(rect.get_x() + rect.get_width()/2., label_position,
                '%d' % int(height),
                ha='center', va='bottom')
        

autolabel(a)

autolabel(b)
        
ax.axes.set_xticks(np.arange(7))
ax.axes.set_xticklabels(names)
ax.set_xlabel('No of semi final and finals played by the above teams')
ax.legend(('Semi-Final','Final'))
plt.show()



